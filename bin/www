#!/usr/bin/env node
"use strict";

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('comment-forest:server');
var WebSocketServer = require('websocket').server;
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
// app.set('port', port);

/**
 * Create HTTP server.
 */
//
// var server = http.createServer(function(request, response) {
//     // process HTTP request. Since we're writing just WebSockets server
//     // we don't have to implement anything.
// });

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, onListening);
server.on('error', onError);
// server.on('listening', onListening);

var wsServer = new WebSocketServer({
  httpServer: server
});

var clients = [];

wsServer.on('request', function (req) {
  console.log(new Date() + ' connection from origin ' + req.origin + '.');

  // check 'request.origin' to make sure that client is connecting from your website
  var connection = req.accept(null, req.origin);

  // we need to know client index to remove them on 'close' event
  var index = clients.push(connection) - 1;

  var count = 0;
  setInterval(function () {
    connection.sendUTF(JSON.stringify({count: count}));
    count++;
  }, Math.random() * 1000 * 5);

  connection.on('message', function (msg) {
    if (msg.type === 'utf8') {
      connection.sendUTF(JSON.stringify({ type:'color', data: 'aaa' }));
    }
  });

  connection.on('close', function (conn) {
    console.log(new Date() + 'Peer ' + conn.remoteAddress + ' disconnected.');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
